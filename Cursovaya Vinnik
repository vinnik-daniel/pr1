#define _CRT_SECURE_NO_DEPRECATE
#include <stdio.h>
#include <png.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

static int count_swap = 0; // количство перемещений елементов массива при сортировки
static int pixel_square_size = 20; // Размер квадрата пикселя 

/* A coloured pixel. */
typedef struct
{
    uint8_t red;
    uint8_t green;
    uint8_t blue;
    uint8_t alpha;
} pixel_t;

/* A picture. */

typedef struct
{
    pixel_t* pixels;
    size_t width;
    size_t height;
} bitmap_t;

/* Given "bitmap", this returns the pixel of bitmap at the point
("x", "y"). */

static pixel_t* pixel_at(bitmap_t* bitmap, int x, int y)
{
    return bitmap->pixels + bitmap->width * y + x;
}

/* Write "bitmap" to a PNG file specified by "path"; returns 0 on
success, non-zero on error. */

static int save_png_to_file(bitmap_t* bitmap, const char* path)
{
    FILE* fp;
    png_structp png_ptr = NULL;
    png_infop info_ptr = NULL;
    size_t x, y;
    png_byte** row_pointers = NULL;
    /* "status" contains the return value of this function. At first
    it is set to a value which means 'failure'. When the routine
    has finished its work, it is set to a value which means
    'success'. */
    int status = -1;
    /* The following number is set by trial and error only. I cannot
    see where it it is documented in the libpng manual.
    */
    int pixel_size = 4;
    int depth = 8;

    fp = fopen(path, "wb");
    if (!fp) {
        goto fopen_failed;
    }

    png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
    if (png_ptr == NULL) {
        goto png_create_write_struct_failed;
    }

    info_ptr = png_create_info_struct(png_ptr);
    if (info_ptr == NULL) {
        goto png_create_info_struct_failed;
    }

    /* Set up error handling. */

    if (setjmp(png_jmpbuf(png_ptr))) {
        goto png_failure;
    }

    /* Set image attributes. */

    png_set_IHDR(png_ptr,
        info_ptr,
        bitmap->width,
        bitmap->height,
        depth,
        PNG_COLOR_TYPE_RGBA,
        PNG_INTERLACE_NONE,
        PNG_COMPRESSION_TYPE_DEFAULT,
        PNG_FILTER_TYPE_DEFAULT);

    /* Initialize rows of PNG. */

    row_pointers = png_malloc(png_ptr, bitmap->height * sizeof(png_byte*));
    for (y = 0; y < bitmap->height; ++y) {
        png_byte* row =
            png_malloc(png_ptr, sizeof(uint8_t) * bitmap->width * pixel_size);
        row_pointers[y] = row;
        for (x = 0; x < bitmap->width; ++x) {
            pixel_t* pixel = pixel_at(bitmap, x, y);
            *row++ = pixel->red;
            *row++ = pixel->green;
            *row++ = pixel->blue;
            *row++ = pixel->alpha;
        }
    }

    /* Write the image data to "fp". */

    png_init_io(png_ptr, fp);
    png_set_rows(png_ptr, info_ptr, row_pointers);
    png_write_png(png_ptr, info_ptr, PNG_TRANSFORM_IDENTITY, NULL);

    /* The routine has successfully written the file, so we set
    "status" to a value which indicates success. */

    status = 0;

    for (y = 0; y < bitmap->height; y++) {
        png_free(png_ptr, row_pointers[y]);
    }
    png_free(png_ptr, row_pointers);

png_failure:
png_create_info_struct_failed:
    png_destroy_write_struct(&png_ptr, &info_ptr);
png_create_write_struct_failed:
    fclose(fp);
fopen_failed:
    return status;
}

/* Given "value" and "max", the maximum value which we expect "value"
to take, this returns an integer between 0 and 255 proportional to
"value" divided by "max". */

static int pix(int value, int max)
{
    if (value < 0)
        return 0;
    return (int)(256.0 * ((double)(value) / (double)max));
}

// ----------------------------------------------------------- //

// Стераем картинку с помщю белого цвета 
int clear(bitmap_t image)
{
    for (int y = 0; y < image.height; y++)
    {
        for (int x = 0; x < image.width; x++)
        {
            pixel_t* pixel = pixel_at(&image, x, y);
            pixel->red = 255;
            pixel->green = 255;
            pixel->blue = 255;
            pixel->alpha = 255;
        }
    }
    return 0;
}


// Случайное перемешивание елементов в массиве 
void random_shuffle(int* m, int n)
{
    int i = 0;
    srand(time(NULL));
    while (i != n)
    {
        int candidate = ((rand() % n) + 1);
        int ok = 1; 
        for (int j = 0; ok && j != i; j++)
        {
            ok &= (candidate != m[j]);
        }
        if (ok)
        {
            m[i++] = candidate;
        }
    }
}

// Создание массива цветов
int* array_of_color(int** colorarray, int n)
{
    for (int i = 0, j = 0; j < n; j++)
    {
        colorarray[i][j] = j;
    }

    for (int i = 0; i < 3; ++i)
    {
        for (int j = 0; j < n; j++)
        {
            colorarray[i][j] = ((((double)j / (double)n) * 255 * i) - ((i / 3) * 255)) + 20 * i;
        }
    }


    if (n >= 20)
    {
        colorarray[1][0] = 255;
        colorarray[1][1] = 255;
        colorarray[1][2] = 255;
        colorarray[1][3] = 255;
        colorarray[1][4] = 247;
        colorarray[1][5] = 175;
        colorarray[1][6] = 94;
        colorarray[1][7] = 0;
        colorarray[1][8] = 0;
        colorarray[1][9] = 0;
        colorarray[1][10] = 0;
        colorarray[1][11] = 140;
        colorarray[1][12] = 212;
        colorarray[1][13] = 255;
        colorarray[1][14] = 255;
        colorarray[1][15] = 255;
        colorarray[1][16] = 255;
        colorarray[1][17] = 255;
        colorarray[1][18] = 255;
        colorarray[1][19] = 255;

        colorarray[2][0] = 0;
        colorarray[2][1] = 71;
        colorarray[2][2] = 121;
        colorarray[2][3] = 213;
        colorarray[2][4] = 255;
        colorarray[2][5] = 255;
        colorarray[2][6] = 255;
        colorarray[2][7] = 255;
        colorarray[2][8] = 162;
        colorarray[2][9] = 98;
        colorarray[2][10] = 0;
        colorarray[2][11] = 0;
        colorarray[2][12] = 0;
        colorarray[2][13] = 0;
        colorarray[2][14] = 0;
        colorarray[2][15] = 0;
        colorarray[2][16] = 0;
        colorarray[2][17] = 0;
        colorarray[2][18] = 0;
        colorarray[2][19] = 0;

        colorarray[3][0] = 0;
        colorarray[3][1] = 3;
        colorarray[3][2] = 3;
        colorarray[3][3] = 3;
        colorarray[3][4] = 3;
        colorarray[3][5] = 3;
        colorarray[3][6] = 0;
        colorarray[3][7] = 195;
        colorarray[3][8] = 255;
        colorarray[3][9] = 255;
        colorarray[3][10] = 255;
        colorarray[3][11] = 255;
        colorarray[3][12] = 255;
        colorarray[3][13] = 251;
        colorarray[3][14] = 180;
        colorarray[3][15] = 150;
        colorarray[3][16] = 120;
        colorarray[3][17] = 80;
        colorarray[3][18] = 50;
        colorarray[3][19] = 0;
    }



    return **colorarray;

}
// Заливки квадрата цветом
int paint(int** colorarray, int i, bitmap_t image, int j, int x)
{
    int v;
    for (int o = 0; o < pixel_square_size; o++)
    {
        for (int u = x; u < x + pixel_square_size; u++)
        {
            v = (j * pixel_square_size) + o;
            pixel_t* pixel = pixel_at(&image, u, v);
            pixel->red = colorarray[1][i];
            pixel->green = colorarray[2][i];
            pixel->blue = colorarray[3][i];
            pixel->alpha = 255;
        }
    }
    return 0;
}


// Cортировка пузырьком
void bubbleSort(int array[], int l, int** colorarray, bitmap_t image, int x, int n)
{
    
    int temp;
    for (int j = 0; j < (n - l - 1); j++)
    {
        
        if (array[j] > array[j + 1])
        {
            
            temp = array[j];
            array[j] = array[j + 1];
            array[j + 1] = temp;

            count_swap++;
        }
    }

    
    for (int j = 0; j < n; j++)
    {
        for (int i = 0; i < n; i++)
        {
            if (array[j] == i)
            {
                
                paint(colorarray, i, image, j, x);
            }
        }
    }
}


int main()
{
    count_swap = 0;

    
    int m = 0;
    int n = 20;
    int x = 0;

    


    printf(" Calculate Elements Count: %d \n\n", n);


    bitmap_t image;
    image.width = (n)*pixel_square_size;
    image.height = (n - 1) * pixel_square_size;
    char name[] = { "frame###.png" }; 

    
    image.pixels = calloc(sizeof(pixel_t), image.width * image.height);


    int Pixel_N = 4; 

    
    int** colorarray = (int**)malloc(n * sizeof(int*));
    for (int i = 0; i < Pixel_N; i++)
    {
        colorarray[i] = (int*)malloc(n * sizeof(int));
    }

    // Выделяем память под индексы 
    int** array = (int**)malloc(n * sizeof(int*));

    // Инцилизация индексов
    for (int i = 0; i < n; ++i)
    {
        array[i] = i;
    }

    // Перемешиваем индексы случайным образом    
    random_shuffle(array, n);

    // Присваеваем цвета под индексы
    array_of_color(colorarray, n);



    clear(image);
    for (int l = 0; l < image.width / pixel_square_size; l++)
    {
        bubbleSort(array, l, colorarray, image, x, n);
        x += pixel_square_size;
        name[5] = l / 100 + '0';
        name[6] = (l / 10) % 10 + '0';
        name[7] = l % 10 + '0';
        if (save_png_to_file(&image, name) == 0)
        {
            printf(" Save Image : %s \n", name);
        }

    }

    
    clear(image);
    name[5] = n / 100 + '0';
    name[6] = (n / 10) % 10 + '0';
    name[7] = n % 10 + '0';
    if (save_png_to_file(&image, name) == 0)
    {
        printf(" Clear Image : %s \n\n", name);
    }


    printf(" Count Swaps: %d \n\n", count_swap);

    return 0;
}
